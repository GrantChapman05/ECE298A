/* Generated by Yosys 0.33 (git sha1 2584903a060) */

module \$paramod$db93e613317dfb2b0e4491d763dbf58ebcc52dfe\loop_filter (clk, rst_n, up, dn, freq_word);
  wire [23:0] _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  input clk;
  wire clk;
  input dn;
  wire dn;
  wire [2:0] e;
  output [23:0] freq_word;
  reg [23:0] freq_word;
  wire [24:0] i_next;
  reg [24:0] iacc;
  wire [24:0] p_term;
  input rst_n;
  wire rst_n;
  wire [24:0] \sat_u$func$src/loop_filter.v:44$44.x ;
  input up;
  wire up;
  assign _0499_ = dn & ~(up);
  assign _0500_ = ~iacc[23];
  assign _0501_ = _0499_ ^ _0500_;
  assign _0502_ = ~_0501_;
  assign _0503_ = ~iacc[22];
  assign _0504_ = up | ~(dn);
  assign _0505_ = _0504_ | _0503_;
  assign _0506_ = _0499_ ^ _0503_;
  assign _0507_ = ~_0506_;
  assign _0508_ = iacc[21] & ~(_0504_);
  assign _0509_ = _0504_ ^ iacc[21];
  assign _0510_ = ~iacc[20];
  assign _0511_ = _0504_ | _0510_;
  assign _0512_ = ~(_0511_ | _0509_);
  assign _0513_ = ~(_0512_ | _0508_);
  assign _0514_ = _0499_ ^ _0510_;
  assign _0515_ = ~(_0514_ | _0509_);
  assign _0516_ = iacc[19] & ~(_0504_);
  assign _0517_ = _0504_ ^ iacc[19];
  assign _0518_ = ~iacc[18];
  assign _0519_ = _0504_ | _0518_;
  assign _0520_ = ~(_0519_ | _0517_);
  assign _0521_ = ~(_0520_ | _0516_);
  assign _0001_ = _0499_ ^ _0518_;
  assign _0002_ = ~(_0001_ | _0517_);
  assign _0003_ = ~iacc[17];
  assign _0004_ = _0504_ | _0003_;
  assign _0005_ = _0499_ ^ _0003_;
  assign _0006_ = ~iacc[16];
  assign _0007_ = _0504_ | _0006_;
  assign _0008_ = ~(_0007_ | _0005_);
  assign _0009_ = _0004_ & ~(_0008_);
  assign _0010_ = _0002_ & ~(_0009_);
  assign _0011_ = _0521_ & ~(_0010_);
  assign _0012_ = _0499_ ^ _0006_;
  assign _0013_ = _0012_ | _0005_;
  assign _0014_ = _0002_ & ~(_0013_);
  assign _0015_ = ~iacc[15];
  assign _0016_ = _0504_ | _0015_;
  assign _0017_ = _0499_ ^ _0015_;
  assign _0018_ = ~iacc[14];
  assign _0019_ = _0504_ | _0018_;
  assign _0020_ = ~(_0019_ | _0017_);
  assign _0021_ = _0016_ & ~(_0020_);
  assign _0022_ = _0499_ ^ _0018_;
  assign _0023_ = ~(_0022_ | _0017_);
  assign _0024_ = ~iacc[13];
  assign _0025_ = _0504_ | _0024_;
  assign _0026_ = _0499_ ^ _0024_;
  assign _0027_ = ~iacc[12];
  assign _0028_ = _0504_ | _0027_;
  assign _0029_ = ~(_0028_ | _0026_);
  assign _0030_ = _0025_ & ~(_0029_);
  assign _0031_ = _0023_ & ~(_0030_);
  assign _0032_ = _0021_ & ~(_0031_);
  assign _0033_ = _0499_ ^ _0027_;
  assign _0034_ = ~(_0033_ | _0026_);
  assign _0035_ = _0034_ & _0023_;
  assign _0036_ = iacc[11] & ~(_0504_);
  assign _0037_ = _0499_ ^ iacc[11];
  assign _0038_ = ~iacc[10];
  assign _0039_ = _0504_ | _0038_;
  assign _0040_ = _0039_ | ~(_0037_);
  assign _0041_ = _0040_ & ~(_0036_);
  assign _0042_ = _0499_ ^ _0038_;
  assign _0043_ = _0037_ & ~(_0042_);
  assign _0044_ = ~iacc[9];
  assign _0045_ = _0504_ | _0044_;
  assign _0046_ = _0499_ ^ _0044_;
  assign _0047_ = ~iacc[8];
  assign _0048_ = _0504_ | _0047_;
  assign _0049_ = ~(_0048_ | _0046_);
  assign _0050_ = _0045_ & ~(_0049_);
  assign _0051_ = _0043_ & ~(_0050_);
  assign _0052_ = _0041_ & ~(_0051_);
  assign _0053_ = _0035_ & ~(_0052_);
  assign _0054_ = _0032_ & ~(_0053_);
  assign _0055_ = _0499_ ^ _0047_;
  assign _0056_ = _0055_ | _0046_;
  assign _0057_ = _0043_ & ~(_0056_);
  assign _0058_ = _0057_ & _0035_;
  assign _0059_ = iacc[7] & ~(_0504_);
  assign _0060_ = _0499_ ^ iacc[7];
  assign _0061_ = ~iacc[6];
  assign _0062_ = _0504_ | _0061_;
  assign _0063_ = _0062_ | ~(_0060_);
  assign _0064_ = _0063_ & ~(_0059_);
  assign _0065_ = _0499_ ^ _0061_;
  assign _0066_ = _0060_ & ~(_0065_);
  assign _0067_ = iacc[5] & ~(_0504_);
  assign _0068_ = _0499_ ^ iacc[5];
  assign _0069_ = ~iacc[4];
  assign _0070_ = _0504_ | _0069_;
  assign _0071_ = _0070_ | ~(_0068_);
  assign _0072_ = _0071_ & ~(_0067_);
  assign _0073_ = _0066_ & ~(_0072_);
  assign _0074_ = _0064_ & ~(_0073_);
  assign _0075_ = _0499_ ^ _0069_;
  assign _0076_ = _0075_ | ~(_0068_);
  assign _0077_ = _0066_ & ~(_0076_);
  assign _0078_ = iacc[3] & ~(_0504_);
  assign _0079_ = _0499_ ^ iacc[3];
  assign _0080_ = ~iacc[2];
  assign _0081_ = _0504_ | _0080_;
  assign _0082_ = _0081_ | ~(_0079_);
  assign _0083_ = _0082_ & ~(_0078_);
  assign _0084_ = _0499_ ^ _0080_;
  assign _0085_ = _0079_ & ~(_0084_);
  assign _0086_ = iacc[1] & ~(_0504_);
  assign _0087_ = _0499_ ^ iacc[1];
  assign _0088_ = ~iacc[0];
  assign _0089_ = _0504_ | _0088_;
  assign _0090_ = _0089_ | ~(_0087_);
  assign _0091_ = _0090_ & ~(_0086_);
  assign _0092_ = _0085_ & ~(_0091_);
  assign _0093_ = _0083_ & ~(_0092_);
  assign _0094_ = _0077_ & ~(_0093_);
  assign _0095_ = _0074_ & ~(_0094_);
  assign _0096_ = _0058_ & ~(_0095_);
  assign _0097_ = _0054_ & ~(_0096_);
  assign _0098_ = _0014_ & ~(_0097_);
  assign _0099_ = _0011_ & ~(_0098_);
  assign _0100_ = _0515_ & ~(_0099_);
  assign _0101_ = _0513_ & ~(_0100_);
  assign _0102_ = _0507_ & ~(_0101_);
  assign _0103_ = _0505_ & ~(_0102_);
  assign _0104_ = _0103_ ^ _0502_;
  assign _0105_ = _0104_ ^ _0499_;
  assign _0106_ = _0101_ ^ _0507_;
  assign _0107_ = _0106_ | _0504_;
  assign _0108_ = _0106_ ^ _0499_;
  assign _0109_ = ~_0108_;
  assign _0110_ = ~_0509_;
  assign _0111_ = ~(_0099_ | _0514_);
  assign _0112_ = _0511_ & ~(_0111_);
  assign _0113_ = _0112_ ^ _0110_;
  assign _0114_ = _0499_ & ~(_0113_);
  assign _0115_ = _0113_ ^ _0499_;
  assign _0116_ = ~(_0099_ ^ _0514_);
  assign _0117_ = _0116_ | _0504_;
  assign _0118_ = ~(_0117_ | _0115_);
  assign _0119_ = ~(_0118_ | _0114_);
  assign _0120_ = _0116_ ^ _0499_;
  assign _0121_ = ~(_0120_ | _0115_);
  assign _0122_ = ~_0517_;
  assign _0123_ = ~(_0097_ | _0013_);
  assign _0124_ = _0009_ & ~(_0123_);
  assign _0125_ = ~(_0124_ | _0001_);
  assign _0126_ = _0519_ & ~(_0125_);
  assign _0127_ = _0126_ ^ _0122_;
  assign _0128_ = _0127_ | _0504_;
  assign _0129_ = _0127_ ^ _0504_;
  assign _0130_ = ~(_0124_ ^ _0001_);
  assign _0131_ = _0130_ | _0504_;
  assign _0132_ = _0129_ & ~(_0131_);
  assign _0133_ = _0128_ & ~(_0132_);
  assign _0134_ = _0130_ ^ _0499_;
  assign _0135_ = _0129_ & ~(_0134_);
  assign _0136_ = ~_0005_;
  assign _0137_ = ~(_0097_ | _0012_);
  assign _0138_ = _0007_ & ~(_0137_);
  assign _0139_ = _0138_ ^ _0136_;
  assign _0140_ = _0139_ | _0504_;
  assign _0141_ = _0139_ ^ _0504_;
  assign _0142_ = ~(_0097_ ^ _0012_);
  assign _0143_ = _0142_ | _0504_;
  assign _0144_ = _0141_ & ~(_0143_);
  assign _0145_ = _0140_ & ~(_0144_);
  assign _0146_ = _0135_ & ~(_0145_);
  assign _0147_ = _0133_ & ~(_0146_);
  assign _0148_ = _0142_ ^ _0499_;
  assign _0149_ = _0148_ | ~(_0141_);
  assign _0150_ = _0135_ & ~(_0149_);
  assign _0151_ = ~_0022_;
  assign _0152_ = _0057_ & ~(_0095_);
  assign _0153_ = _0052_ & ~(_0152_);
  assign _0154_ = _0034_ & ~(_0153_);
  assign _0155_ = _0030_ & ~(_0154_);
  assign _0156_ = _0151_ & ~(_0155_);
  assign _0157_ = _0019_ & ~(_0156_);
  assign _0158_ = ~(_0157_ ^ _0017_);
  assign _0159_ = _0158_ | _0504_;
  assign _0160_ = _0158_ ^ _0504_;
  assign _0161_ = _0155_ ^ _0151_;
  assign _0162_ = _0161_ | _0504_;
  assign _0163_ = _0160_ & ~(_0162_);
  assign _0164_ = _0159_ & ~(_0163_);
  assign _0165_ = _0161_ ^ _0499_;
  assign _0166_ = _0160_ & ~(_0165_);
  assign _0167_ = ~_0033_;
  assign _0168_ = _0167_ & ~(_0153_);
  assign _0169_ = _0028_ & ~(_0168_);
  assign _0170_ = ~(_0169_ ^ _0026_);
  assign _0171_ = _0170_ | _0504_;
  assign _0172_ = _0170_ ^ _0504_;
  assign _0173_ = _0153_ ^ _0167_;
  assign _0174_ = _0173_ | _0504_;
  assign _0175_ = _0172_ & ~(_0174_);
  assign _0176_ = _0171_ & ~(_0175_);
  assign _0177_ = _0166_ & ~(_0176_);
  assign _0178_ = _0164_ & ~(_0177_);
  assign _0179_ = _0173_ ^ _0499_;
  assign _0180_ = ~_0179_;
  assign _0181_ = ~(_0180_ & _0172_);
  assign _0182_ = _0166_ & ~(_0181_);
  assign _0183_ = ~_0042_;
  assign _0184_ = ~(_0095_ | _0056_);
  assign _0185_ = _0050_ & ~(_0184_);
  assign _0186_ = _0183_ & ~(_0185_);
  assign _0187_ = _0039_ & ~(_0186_);
  assign _0188_ = _0187_ ^ _0037_;
  assign _0189_ = _0188_ | _0504_;
  assign _0190_ = _0188_ ^ _0504_;
  assign _0191_ = _0185_ ^ _0183_;
  assign _0192_ = _0191_ | _0504_;
  assign _0193_ = _0190_ & ~(_0192_);
  assign _0194_ = _0189_ & ~(_0193_);
  assign _0195_ = _0191_ ^ _0499_;
  assign _0196_ = _0190_ & ~(_0195_);
  assign _0197_ = ~_0046_;
  assign _0198_ = ~_0055_;
  assign _0199_ = _0198_ & ~(_0095_);
  assign _0200_ = _0048_ & ~(_0199_);
  assign _0201_ = _0200_ ^ _0197_;
  assign _0202_ = _0201_ | _0504_;
  assign _0203_ = _0201_ ^ _0499_;
  assign _0204_ = _0095_ ^ _0198_;
  assign _0205_ = _0204_ | _0504_;
  assign _0206_ = ~(_0205_ | _0203_);
  assign _0207_ = _0202_ & ~(_0206_);
  assign _0208_ = _0196_ & ~(_0207_);
  assign _0209_ = _0194_ & ~(_0208_);
  assign _0210_ = _0182_ & ~(_0209_);
  assign _0211_ = _0178_ & ~(_0210_);
  assign _0212_ = _0204_ ^ _0499_;
  assign _0213_ = _0212_ | _0203_;
  assign _0214_ = _0196_ & ~(_0213_);
  assign _0215_ = _0214_ & _0182_;
  assign _0216_ = ~_0065_;
  assign _0217_ = ~(_0093_ | _0076_);
  assign _0218_ = _0072_ & ~(_0217_);
  assign _0219_ = _0216_ & ~(_0218_);
  assign _0220_ = _0062_ & ~(_0219_);
  assign _0221_ = _0220_ ^ _0060_;
  assign _0222_ = _0221_ | _0504_;
  assign _0223_ = _0221_ ^ _0504_;
  assign _0224_ = _0218_ ^ _0216_;
  assign _0225_ = _0224_ | _0504_;
  assign _0226_ = _0223_ & ~(_0225_);
  assign _0227_ = _0222_ & ~(_0226_);
  assign _0228_ = _0224_ ^ _0499_;
  assign _0229_ = _0223_ & ~(_0228_);
  assign _0230_ = ~_0075_;
  assign _0231_ = _0230_ & ~(_0093_);
  assign _0232_ = _0070_ & ~(_0231_);
  assign _0233_ = _0232_ ^ _0068_;
  assign _0234_ = _0233_ | _0504_;
  assign _0235_ = _0233_ ^ _0504_;
  assign _0236_ = _0093_ ^ _0230_;
  assign _0237_ = _0236_ | _0504_;
  assign _0238_ = _0235_ & ~(_0237_);
  assign _0239_ = _0234_ & ~(_0238_);
  assign _0240_ = _0229_ & ~(_0239_);
  assign _0241_ = _0227_ & ~(_0240_);
  assign _0242_ = _0236_ ^ _0499_;
  assign _0243_ = _0235_ & ~(_0242_);
  assign _0244_ = _0243_ & _0229_;
  assign _0245_ = ~_0084_;
  assign _0246_ = _0245_ & ~(_0091_);
  assign _0247_ = _0081_ & ~(_0246_);
  assign _0248_ = _0247_ ^ _0079_;
  assign _0249_ = _0248_ | _0504_;
  assign _0250_ = _0248_ ^ _0504_;
  assign _0251_ = _0091_ ^ _0245_;
  assign _0252_ = _0251_ | _0504_;
  assign _0253_ = _0250_ & ~(_0252_);
  assign _0254_ = _0249_ & ~(_0253_);
  assign _0255_ = _0251_ ^ _0499_;
  assign _0256_ = _0250_ & ~(_0255_);
  assign _0257_ = _0089_ ^ _0087_;
  assign _0258_ = _0257_ | _0504_;
  assign _0259_ = _0257_ ^ _0504_;
  assign _0260_ = _0088_ & ~(_0504_);
  assign _0261_ = _0260_ & _0259_;
  assign _0262_ = _0258_ & ~(_0261_);
  assign _0263_ = _0256_ & ~(_0262_);
  assign _0264_ = _0254_ & ~(_0263_);
  assign _0265_ = _0244_ & ~(_0264_);
  assign _0266_ = _0241_ & ~(_0265_);
  assign _0267_ = _0215_ & ~(_0266_);
  assign _0268_ = _0211_ & ~(_0267_);
  assign _0269_ = _0150_ & ~(_0268_);
  assign _0270_ = _0147_ & ~(_0269_);
  assign _0271_ = _0121_ & ~(_0270_);
  assign _0272_ = _0119_ & ~(_0271_);
  assign _0273_ = _0109_ & ~(_0272_);
  assign _0274_ = _0107_ & ~(_0273_);
  assign _0275_ = _0274_ ^ _0105_;
  assign _0276_ = _0272_ ^ _0109_;
  assign _0277_ = _0275_ & ~(_0276_);
  assign _0278_ = _0275_ & ~(_0276_);
  assign _0279_ = ~_0115_;
  assign _0280_ = ~(_0270_ | _0120_);
  assign _0281_ = _0117_ & ~(_0280_);
  assign _0282_ = _0281_ ^ _0279_;
  assign _0283_ = ~(_0270_ ^ _0120_);
  assign _0284_ = ~_0283_;
  assign _0285_ = _0284_ & ~(_0282_);
  assign _0286_ = _0278_ & ~(_0285_);
  assign _0287_ = _0277_ & ~(_0286_);
  assign _0288_ = _0283_ | _0282_;
  assign _0289_ = _0278_ & ~(_0288_);
  assign _0290_ = ~(_0268_ | _0149_);
  assign _0291_ = _0145_ & ~(_0290_);
  assign _0292_ = ~(_0291_ | _0134_);
  assign _0293_ = _0131_ & ~(_0292_);
  assign _0294_ = ~(_0293_ ^ _0129_);
  assign _0295_ = ~(_0291_ ^ _0134_);
  assign _0296_ = _0294_ & ~(_0295_);
  assign _0297_ = _0293_ ^ _0129_;
  assign _0298_ = _0295_ | _0297_;
  assign _0299_ = ~(_0268_ | _0148_);
  assign _0300_ = _0143_ & ~(_0299_);
  assign _0301_ = _0300_ ^ _0141_;
  assign _0302_ = ~(_0268_ ^ _0148_);
  assign _0303_ = _0302_ | _0301_;
  assign _0304_ = _0303_ & ~(_0298_);
  assign _0305_ = _0296_ & ~(_0304_);
  assign _0306_ = _0289_ & ~(_0305_);
  assign _0307_ = _0287_ & ~(_0306_);
  assign _0308_ = _0302_ | _0301_;
  assign _0309_ = _0308_ | _0298_;
  assign _0310_ = _0289_ & ~(_0309_);
  assign _0311_ = ~_0165_;
  assign _0312_ = _0214_ & ~(_0266_);
  assign _0313_ = _0209_ & ~(_0312_);
  assign _0314_ = ~(_0313_ | _0181_);
  assign _0315_ = _0176_ & ~(_0314_);
  assign _0316_ = _0311_ & ~(_0315_);
  assign _0317_ = _0162_ & ~(_0316_);
  assign _0318_ = _0317_ ^ _0160_;
  assign _0319_ = _0315_ ^ _0311_;
  assign _0320_ = ~_0319_;
  assign _0321_ = _0320_ & ~(_0318_);
  assign _0322_ = _0320_ & ~(_0318_);
  assign _0323_ = _0180_ & ~(_0313_);
  assign _0324_ = _0174_ & ~(_0323_);
  assign _0325_ = _0324_ ^ _0172_;
  assign _0326_ = _0313_ ^ _0180_;
  assign _0327_ = ~_0326_;
  assign _0328_ = _0327_ & ~(_0325_);
  assign _0329_ = _0322_ & ~(_0328_);
  assign _0330_ = _0321_ & ~(_0329_);
  assign _0331_ = _0326_ | _0325_;
  assign _0332_ = _0322_ & ~(_0331_);
  assign _0333_ = ~_0195_;
  assign _0334_ = ~(_0266_ | _0213_);
  assign _0335_ = _0207_ & ~(_0334_);
  assign _0336_ = _0333_ & ~(_0335_);
  assign _0337_ = _0192_ & ~(_0336_);
  assign _0338_ = ~(_0337_ ^ _0190_);
  assign _0339_ = _0335_ ^ _0333_;
  assign _0340_ = _0338_ & ~(_0339_);
  assign _0341_ = _0338_ & ~(_0339_);
  assign _0342_ = ~_0212_;
  assign _0343_ = _0342_ & ~(_0266_);
  assign _0344_ = _0343_ | ~(_0205_);
  assign _0345_ = _0344_ ^ _0203_;
  assign _0346_ = _0266_ ^ _0342_;
  assign _0347_ = ~_0346_;
  assign _0348_ = _0347_ & ~(_0345_);
  assign _0349_ = _0341_ & ~(_0348_);
  assign _0350_ = _0340_ & ~(_0349_);
  assign _0351_ = _0332_ & ~(_0350_);
  assign _0352_ = _0330_ & ~(_0351_);
  assign _0353_ = _0347_ & ~(_0345_);
  assign _0354_ = ~(_0353_ & _0341_);
  assign _0355_ = _0332_ & ~(_0354_);
  assign _0356_ = ~_0228_;
  assign _0357_ = _0243_ & ~(_0264_);
  assign _0358_ = _0239_ & ~(_0357_);
  assign _0359_ = _0356_ & ~(_0358_);
  assign _0360_ = _0225_ & ~(_0359_);
  assign _0361_ = _0360_ ^ _0223_;
  assign _0362_ = _0358_ ^ _0356_;
  assign _0363_ = ~_0362_;
  assign _0364_ = _0363_ & ~(_0361_);
  assign _0365_ = _0363_ & ~(_0361_);
  assign _0366_ = ~_0242_;
  assign _0367_ = _0366_ & ~(_0264_);
  assign _0368_ = _0237_ & ~(_0367_);
  assign _0369_ = _0368_ ^ _0235_;
  assign _0370_ = _0264_ ^ _0366_;
  assign _0371_ = ~_0370_;
  assign _0372_ = _0371_ & ~(_0369_);
  assign _0373_ = _0365_ & ~(_0372_);
  assign _0374_ = _0364_ & ~(_0373_);
  assign _0375_ = _0370_ | _0369_;
  assign _0376_ = ~(_0262_ | _0255_);
  assign _0377_ = _0252_ & ~(_0376_);
  assign _0378_ = _0377_ ^ _0250_;
  assign _0379_ = ~(_0262_ ^ _0255_);
  assign _0380_ = _0365_ & ~(_0375_);
  assign _0381_ = _0374_ & ~(_0380_);
  assign _0382_ = _0355_ & ~(_0381_);
  assign _0383_ = _0352_ & ~(_0382_);
  assign _0384_ = _0310_ & ~(_0383_);
  assign _0385_ = _0384_ | ~(_0307_);
  assign _0386_ = _0504_ ^ iacc[24];
  assign _0387_ = _0504_ | _0500_;
  assign _0388_ = ~(_0505_ | _0501_);
  assign _0389_ = _0387_ & ~(_0388_);
  assign _0390_ = _0506_ | _0501_;
  assign _0391_ = ~(_0390_ | _0513_);
  assign _0392_ = _0389_ & ~(_0391_);
  assign _0393_ = _0390_ | ~(_0515_);
  assign _0394_ = ~(_0393_ | _0011_);
  assign _0395_ = _0392_ & ~(_0394_);
  assign _0396_ = _0393_ | ~(_0014_);
  assign _0397_ = ~(_0396_ | _0097_);
  assign _0398_ = _0395_ & ~(_0397_);
  assign _0399_ = ~(_0398_ ^ _0386_);
  assign _0400_ = _0399_ ^ _0499_;
  assign _0401_ = _0104_ | _0504_;
  assign _0402_ = ~(_0107_ | _0105_);
  assign _0403_ = _0401_ & ~(_0402_);
  assign _0404_ = _0108_ | _0105_;
  assign _0405_ = ~(_0404_ | _0119_);
  assign _0406_ = _0403_ & ~(_0405_);
  assign _0407_ = _0404_ | ~(_0121_);
  assign _0408_ = ~(_0407_ | _0147_);
  assign _0409_ = _0406_ & ~(_0408_);
  assign _0410_ = _0407_ | ~(_0150_);
  assign _0411_ = ~(_0410_ | _0268_);
  assign _0412_ = _0409_ & ~(_0411_);
  assign _0413_ = ~(_0412_ ^ _0400_);
  assign _0414_ = _0385_ | ~(_0413_);
  assign _0415_ = _0499_ ^ _0088_;
  assign _0416_ = _0415_ ^ _0504_;
  assign _0417_ = _0414_ & ~(_0416_);
  assign _0418_ = ~_0276_;
  assign _0419_ = _0418_ | _0275_;
  assign _0420_ = ~(_0274_ ^ _0105_);
  assign _0421_ = _0420_ & ~(_0418_);
  assign _0422_ = _0282_ & ~(_0284_);
  assign _0423_ = _0421_ & ~(_0422_);
  assign _0424_ = _0423_ | _0419_;
  assign _0425_ = ~(_0283_ & _0282_);
  assign _0426_ = _0421_ & ~(_0425_);
  assign _0427_ = ~_0295_;
  assign _0428_ = _0297_ & ~(_0427_);
  assign _0429_ = _0427_ | _0294_;
  assign _0430_ = ~(_0302_ & _0301_);
  assign _0431_ = _0430_ & ~(_0429_);
  assign _0432_ = _0428_ & ~(_0431_);
  assign _0433_ = _0426_ & ~(_0432_);
  assign _0434_ = _0433_ | _0424_;
  assign _0435_ = _0413_ & ~(_0434_);
  assign _0436_ = ~(_0302_ & _0301_);
  assign _0437_ = _0436_ | _0429_;
  assign _0438_ = _0437_ | ~(_0426_);
  assign _0439_ = _0413_ & ~(_0438_);
  assign _0440_ = _0318_ & ~(_0320_);
  assign _0441_ = _0318_ & ~(_0320_);
  assign _0442_ = _0325_ & ~(_0327_);
  assign _0443_ = _0441_ & ~(_0442_);
  assign _0444_ = _0440_ & ~(_0443_);
  assign _0445_ = ~(_0326_ & _0325_);
  assign _0446_ = _0441_ & ~(_0445_);
  assign _0447_ = _0339_ & ~(_0338_);
  assign _0448_ = _0339_ & ~(_0338_);
  assign _0449_ = _0345_ & ~(_0347_);
  assign _0450_ = _0448_ & ~(_0449_);
  assign _0451_ = _0447_ & ~(_0450_);
  assign _0452_ = _0446_ & ~(_0451_);
  assign _0453_ = _0444_ & ~(_0452_);
  assign _0454_ = _0345_ & ~(_0347_);
  assign _0455_ = ~(_0454_ & _0448_);
  assign _0456_ = _0446_ & ~(_0455_);
  assign _0457_ = _0361_ & ~(_0363_);
  assign _0458_ = _0361_ & ~(_0363_);
  assign _0459_ = _0369_ & ~(_0371_);
  assign _0460_ = _0458_ & ~(_0459_);
  assign _0461_ = _0457_ & ~(_0460_);
  assign _0462_ = ~(_0370_ & _0369_);
  assign _0463_ = _0458_ & ~(_0462_);
  assign _0464_ = ~(_0379_ & _0378_);
  assign _0465_ = ~(_0379_ & _0378_);
  assign _0466_ = _0465_ & ~(_0464_);
  assign _0467_ = _0463_ & ~(_0466_);
  assign _0468_ = _0461_ & ~(_0467_);
  assign _0469_ = _0456_ & ~(_0468_);
  assign _0470_ = _0453_ & ~(_0469_);
  assign _0471_ = _0439_ & ~(_0470_);
  assign _0472_ = _0435_ & ~(_0471_);
  assign _0473_ = _0472_ ^ _0413_;
  assign _0000_[0] = _0473_ & ~(_0417_);
  assign _0474_ = _0260_ ^ _0259_;
  assign _0475_ = _0414_ & ~(_0474_);
  assign _0000_[1] = _0473_ & ~(_0475_);
  assign _0476_ = _0413_ & ~(_0385_);
  assign _0477_ = _0379_ & ~(_0476_);
  assign _0000_[2] = _0473_ & ~(_0477_);
  assign _0478_ = _0378_ & ~(_0476_);
  assign _0000_[3] = _0473_ & ~(_0478_);
  assign _0479_ = _0370_ & ~(_0476_);
  assign _0000_[4] = _0473_ & ~(_0479_);
  assign _0480_ = _0369_ & ~(_0476_);
  assign _0000_[5] = _0473_ & ~(_0480_);
  assign _0481_ = _0362_ & ~(_0476_);
  assign _0000_[6] = _0473_ & ~(_0481_);
  assign _0482_ = _0361_ & ~(_0476_);
  assign _0000_[7] = _0473_ & ~(_0482_);
  assign _0483_ = _0346_ & ~(_0476_);
  assign _0000_[8] = _0473_ & ~(_0483_);
  assign _0484_ = _0345_ & ~(_0476_);
  assign _0000_[9] = _0473_ & ~(_0484_);
  assign _0485_ = _0339_ & ~(_0476_);
  assign _0000_[10] = _0473_ & ~(_0485_);
  assign _0486_ = _0414_ & ~(_0338_);
  assign _0000_[11] = _0473_ & ~(_0486_);
  assign _0487_ = _0326_ & ~(_0476_);
  assign _0000_[12] = _0473_ & ~(_0487_);
  assign _0488_ = _0325_ & ~(_0476_);
  assign _0000_[13] = _0473_ & ~(_0488_);
  assign _0489_ = _0319_ & ~(_0476_);
  assign _0000_[14] = _0473_ & ~(_0489_);
  assign _0490_ = _0318_ & ~(_0476_);
  assign _0000_[15] = _0473_ & ~(_0490_);
  assign _0491_ = _0302_ & ~(_0476_);
  assign _0000_[16] = _0473_ & ~(_0491_);
  assign _0492_ = _0301_ & ~(_0476_);
  assign _0000_[17] = _0473_ & ~(_0492_);
  assign _0493_ = _0295_ & ~(_0476_);
  assign _0000_[18] = _0473_ & ~(_0493_);
  assign _0494_ = _0297_ & ~(_0476_);
  assign _0000_[19] = _0473_ & ~(_0494_);
  assign _0495_ = _0283_ & ~(_0476_);
  assign _0000_[20] = _0473_ & ~(_0495_);
  assign _0496_ = _0282_ & ~(_0476_);
  assign _0000_[21] = _0473_ & ~(_0496_);
  assign _0497_ = _0276_ & ~(_0476_);
  assign _0000_[22] = _0473_ & ~(_0497_);
  assign _0498_ = _0420_ & ~(_0476_);
  assign _0000_[23] = _0473_ & ~(_0498_);
  assign i_next[1] = ~_0257_;
  assign i_next[2] = ~_0251_;
  assign i_next[3] = ~_0248_;
  assign i_next[4] = ~_0236_;
  assign i_next[5] = ~_0233_;
  assign i_next[6] = ~_0224_;
  assign i_next[7] = ~_0221_;
  assign i_next[8] = ~_0204_;
  assign i_next[9] = ~_0201_;
  assign i_next[10] = ~_0191_;
  assign i_next[11] = ~_0188_;
  assign i_next[12] = ~_0173_;
  assign i_next[13] = ~_0170_;
  assign i_next[14] = ~_0161_;
  assign i_next[15] = ~_0158_;
  assign i_next[16] = ~_0142_;
  assign i_next[17] = ~_0139_;
  assign i_next[18] = ~_0130_;
  assign i_next[19] = ~_0127_;
  assign i_next[20] = ~_0116_;
  assign i_next[21] = ~_0113_;
  assign i_next[22] = ~_0106_;
  assign i_next[23] = ~_0104_;
  assign i_next[24] = ~_0399_;
  assign i_next[0] = ~_0415_;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[3] <= 1'h0;
    else iacc[3] <= i_next[3];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[4] <= 1'h0;
    else iacc[4] <= i_next[4];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[5] <= 1'h0;
    else iacc[5] <= i_next[5];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[6] <= 1'h0;
    else iacc[6] <= i_next[6];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[7] <= 1'h0;
    else iacc[7] <= i_next[7];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[8] <= 1'h0;
    else iacc[8] <= i_next[8];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[9] <= 1'h0;
    else iacc[9] <= i_next[9];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[10] <= 1'h0;
    else iacc[10] <= i_next[10];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[11] <= 1'h0;
    else iacc[11] <= i_next[11];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[12] <= 1'h0;
    else iacc[12] <= i_next[12];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[13] <= 1'h0;
    else iacc[13] <= i_next[13];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[14] <= 1'h0;
    else iacc[14] <= i_next[14];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[15] <= 1'h0;
    else iacc[15] <= i_next[15];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[16] <= 1'h0;
    else iacc[16] <= i_next[16];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[17] <= 1'h0;
    else iacc[17] <= i_next[17];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[18] <= 1'h0;
    else iacc[18] <= i_next[18];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[19] <= 1'h0;
    else iacc[19] <= i_next[19];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[20] <= 1'h0;
    else iacc[20] <= i_next[20];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[21] <= 1'h0;
    else iacc[21] <= i_next[21];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[22] <= 1'h0;
    else iacc[22] <= i_next[22];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[23] <= 1'h0;
    else iacc[23] <= i_next[23];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[24] <= 1'h0;
    else iacc[24] <= i_next[24];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[0] <= 1'h0;
    else freq_word[0] <= _0000_[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[1] <= 1'h0;
    else freq_word[1] <= _0000_[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[2] <= 1'h0;
    else freq_word[2] <= _0000_[2];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[3] <= 1'h0;
    else freq_word[3] <= _0000_[3];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[4] <= 1'h0;
    else freq_word[4] <= _0000_[4];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[5] <= 1'h0;
    else freq_word[5] <= _0000_[5];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[6] <= 1'h0;
    else freq_word[6] <= _0000_[6];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[7] <= 1'h0;
    else freq_word[7] <= _0000_[7];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[8] <= 1'h0;
    else freq_word[8] <= _0000_[8];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[9] <= 1'h0;
    else freq_word[9] <= _0000_[9];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[10] <= 1'h0;
    else freq_word[10] <= _0000_[10];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[11] <= 1'h0;
    else freq_word[11] <= _0000_[11];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[12] <= 1'h0;
    else freq_word[12] <= _0000_[12];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[13] <= 1'h0;
    else freq_word[13] <= _0000_[13];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[14] <= 1'h0;
    else freq_word[14] <= _0000_[14];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[15] <= 1'h0;
    else freq_word[15] <= _0000_[15];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[16] <= 1'h0;
    else freq_word[16] <= _0000_[16];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[17] <= 1'h0;
    else freq_word[17] <= _0000_[17];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[18] <= 1'h0;
    else freq_word[18] <= _0000_[18];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[19] <= 1'h0;
    else freq_word[19] <= _0000_[19];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[20] <= 1'h0;
    else freq_word[20] <= _0000_[20];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[21] <= 1'h0;
    else freq_word[21] <= _0000_[21];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[22] <= 1'h0;
    else freq_word[22] <= _0000_[22];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) freq_word[23] <= 1'h0;
    else freq_word[23] <= _0000_[23];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[0] <= 1'h0;
    else iacc[0] <= i_next[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[1] <= 1'h0;
    else iacc[1] <= i_next[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) iacc[2] <= 1'h0;
    else iacc[2] <= i_next[2];
  assign e[1] = e[2];
  assign p_term = { e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2], e[2] };
  assign \sat_u$func$src/loop_filter.v:44$44.x  = 25'hxxxxxxx;
endmodule

module \$paramod\divider\N=s32'00000000000000000000000000000100 (clk, rst_n, clk_div, edge_pulse);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  input clk;
  wire clk;
  output clk_div;
  reg clk_div;
  reg [1:0] cnt;
  output edge_pulse;
  wire edge_pulse;
  reg pulse;
  input rst_n;
  wire rst_n;
  assign _02_ = ~(cnt[0] & cnt[1]);
  assign _01_ = cnt[0] & cnt[1];
  assign _00_[0] = _02_ & ~(cnt[0]);
  assign _00_[1] = cnt[0] ^ cnt[1];
  assign _03_ = ~clk_div;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) clk_div <= 1'h0;
    else if (!_02_) clk_div <= _03_;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) cnt[0] <= 1'h0;
    else cnt[0] <= _00_[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) cnt[1] <= 1'h0;
    else cnt[1] <= _00_[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) pulse <= 1'h0;
    else pulse <= _01_;
  assign edge_pulse = pulse;
endmodule

module \$paramod\nco\FW=s32'00000000000000000000000000011000 (clk, rst_n, freq_word, nco_clk, phase);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire [23:0] _135_;
  wire [23:0] _136_;
  input clk;
  wire clk;
  input [23:0] freq_word;
  wire [23:0] freq_word;
  output nco_clk;
  reg nco_clk;
  output [23:0] phase;
  reg [23:0] phase;
  input rst_n;
  wire rst_n;
  assign _113_ = phase[1] ^ freq_word[1];
  assign _114_ = ~(phase[0] & freq_word[0]);
  assign _136_[1] = ~(_114_ ^ _113_);
  assign _115_ = ~(phase[2] ^ freq_word[2]);
  assign _116_ = phase[1] & freq_word[1];
  assign _117_ = _113_ & ~(_114_);
  assign _118_ = _117_ | _116_;
  assign _136_[2] = ~(_118_ ^ _115_);
  assign _119_ = ~(phase[3] ^ freq_word[3]);
  assign _120_ = ~(phase[2] & freq_word[2]);
  assign _121_ = _118_ & ~(_115_);
  assign _122_ = _120_ & ~(_121_);
  assign _136_[3] = _122_ ^ _119_;
  assign _123_ = ~(phase[4] ^ freq_word[4]);
  assign _124_ = phase[3] & freq_word[3];
  assign _125_ = ~(_120_ | _119_);
  assign _126_ = _125_ | _124_;
  assign _127_ = _119_ | _115_;
  assign _128_ = _118_ & ~(_127_);
  assign _129_ = _128_ | _126_;
  assign _136_[4] = ~(_129_ ^ _123_);
  assign _130_ = ~(phase[5] ^ freq_word[5]);
  assign _131_ = ~(phase[4] & freq_word[4]);
  assign _132_ = _129_ & ~(_123_);
  assign _133_ = _131_ & ~(_132_);
  assign _136_[5] = _133_ ^ _130_;
  assign _134_ = ~(phase[6] ^ freq_word[6]);
  assign _000_ = phase[5] & freq_word[5];
  assign _001_ = ~(_131_ | _130_);
  assign _002_ = _001_ | _000_;
  assign _003_ = _130_ | _123_;
  assign _004_ = _003_ | ~(_129_);
  assign _005_ = _004_ & ~(_002_);
  assign _136_[6] = _005_ ^ _134_;
  assign _006_ = ~(phase[7] ^ freq_word[7]);
  assign _007_ = ~(phase[6] & freq_word[6]);
  assign _008_ = ~(_005_ | _134_);
  assign _009_ = _007_ & ~(_008_);
  assign _136_[7] = _009_ ^ _006_;
  assign _010_ = ~(phase[8] ^ freq_word[8]);
  assign _011_ = phase[7] & freq_word[7];
  assign _012_ = ~(_007_ | _006_);
  assign _013_ = _012_ | _011_;
  assign _014_ = _006_ | _134_;
  assign _015_ = _002_ & ~(_014_);
  assign _016_ = _015_ | _013_;
  assign _017_ = _014_ | _003_;
  assign _018_ = _129_ & ~(_017_);
  assign _019_ = _018_ | _016_;
  assign _136_[8] = ~(_019_ ^ _010_);
  assign _020_ = ~(phase[9] ^ freq_word[9]);
  assign _021_ = ~(phase[8] & freq_word[8]);
  assign _022_ = _019_ & ~(_010_);
  assign _023_ = _021_ & ~(_022_);
  assign _136_[9] = _023_ ^ _020_;
  assign _024_ = ~(phase[10] ^ freq_word[10]);
  assign _025_ = phase[9] & freq_word[9];
  assign _026_ = ~(_021_ | _020_);
  assign _027_ = _026_ | _025_;
  assign _028_ = _020_ | _010_;
  assign _029_ = _028_ | ~(_019_);
  assign _030_ = _029_ & ~(_027_);
  assign _136_[10] = _030_ ^ _024_;
  assign _031_ = ~(phase[11] ^ freq_word[11]);
  assign _032_ = ~(phase[10] & freq_word[10]);
  assign _033_ = ~(_030_ | _024_);
  assign _034_ = _032_ & ~(_033_);
  assign _136_[11] = _034_ ^ _031_;
  assign _035_ = ~(phase[12] ^ freq_word[12]);
  assign _036_ = phase[11] & freq_word[11];
  assign _037_ = ~(_032_ | _031_);
  assign _038_ = _037_ | _036_;
  assign _039_ = _031_ | _024_;
  assign _040_ = _027_ & ~(_039_);
  assign _041_ = _040_ | _038_;
  assign _042_ = _039_ | _028_;
  assign _043_ = _019_ & ~(_042_);
  assign _044_ = ~(_043_ | _041_);
  assign _136_[12] = _044_ ^ _035_;
  assign _045_ = ~(phase[13] ^ freq_word[13]);
  assign _046_ = ~(phase[12] & freq_word[12]);
  assign _047_ = ~(_044_ | _035_);
  assign _048_ = _046_ & ~(_047_);
  assign _136_[13] = _048_ ^ _045_;
  assign _049_ = ~(phase[14] ^ freq_word[14]);
  assign _050_ = phase[13] & freq_word[13];
  assign _051_ = ~(_046_ | _045_);
  assign _052_ = _051_ | _050_;
  assign _053_ = _045_ | _035_;
  assign _054_ = _053_ | _044_;
  assign _055_ = _054_ & ~(_052_);
  assign _136_[14] = _055_ ^ _049_;
  assign _056_ = ~(phase[15] ^ freq_word[15]);
  assign _057_ = ~(phase[14] & freq_word[14]);
  assign _058_ = ~(_055_ | _049_);
  assign _059_ = _057_ & ~(_058_);
  assign _136_[15] = _059_ ^ _056_;
  assign _060_ = ~(phase[16] ^ freq_word[16]);
  assign _061_ = phase[15] & freq_word[15];
  assign _062_ = ~(_057_ | _056_);
  assign _063_ = _062_ | _061_;
  assign _064_ = _056_ | _049_;
  assign _065_ = _052_ & ~(_064_);
  assign _066_ = _065_ | _063_;
  assign _067_ = _064_ | _053_;
  assign _068_ = _041_ & ~(_067_);
  assign _069_ = _068_ | _066_;
  assign _070_ = _067_ | _042_;
  assign _071_ = _019_ & ~(_070_);
  assign _072_ = _071_ | _069_;
  assign _136_[16] = ~(_072_ ^ _060_);
  assign _073_ = ~(phase[17] ^ freq_word[17]);
  assign _074_ = ~(phase[16] & freq_word[16]);
  assign _075_ = _072_ & ~(_060_);
  assign _076_ = _074_ & ~(_075_);
  assign _136_[17] = _076_ ^ _073_;
  assign _077_ = ~(phase[18] ^ freq_word[18]);
  assign _078_ = phase[17] & freq_word[17];
  assign _079_ = ~(_074_ | _073_);
  assign _080_ = ~(_079_ | _078_);
  assign _081_ = _073_ | _060_;
  assign _082_ = _072_ & ~(_081_);
  assign _083_ = _080_ & ~(_082_);
  assign _136_[18] = _083_ ^ _077_;
  assign _084_ = ~(phase[19] ^ freq_word[19]);
  assign _085_ = ~(phase[18] & freq_word[18]);
  assign _086_ = ~(_083_ | _077_);
  assign _087_ = _085_ & ~(_086_);
  assign _136_[19] = _087_ ^ _084_;
  assign _088_ = ~(phase[20] ^ freq_word[20]);
  assign _089_ = ~(phase[19] & freq_word[19]);
  assign _090_ = ~(_085_ | _084_);
  assign _091_ = _089_ & ~(_090_);
  assign _092_ = _084_ | _077_;
  assign _093_ = ~(_092_ | _080_);
  assign _094_ = _091_ & ~(_093_);
  assign _095_ = _092_ | _081_;
  assign _096_ = _072_ & ~(_095_);
  assign _097_ = _094_ & ~(_096_);
  assign _136_[20] = _097_ ^ _088_;
  assign _098_ = ~(phase[21] ^ freq_word[21]);
  assign _099_ = ~(phase[20] & freq_word[20]);
  assign _100_ = ~(_097_ | _088_);
  assign _101_ = _099_ & ~(_100_);
  assign _136_[21] = _101_ ^ _098_;
  assign _102_ = ~(phase[22] ^ freq_word[22]);
  assign _103_ = ~(phase[21] & freq_word[21]);
  assign _104_ = ~(_099_ | _098_);
  assign _105_ = _103_ & ~(_104_);
  assign _106_ = _098_ | _088_;
  assign _107_ = ~(_106_ | _097_);
  assign _108_ = _105_ & ~(_107_);
  assign _136_[22] = _108_ ^ _102_;
  assign _109_ = ~(phase[23] ^ freq_word[23]);
  assign _110_ = ~(phase[22] & freq_word[22]);
  assign _111_ = ~(_108_ | _102_);
  assign _112_ = _110_ & ~(_111_);
  assign _136_[23] = _112_ ^ _109_;
  assign _135_[0] = phase[0] ^ freq_word[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) nco_clk <= 1'h0;
    else nco_clk <= phase[23];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[0] <= 1'h0;
    else phase[0] <= _135_[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[1] <= 1'h0;
    else phase[1] <= _136_[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[2] <= 1'h0;
    else phase[2] <= _136_[2];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[3] <= 1'h0;
    else phase[3] <= _136_[3];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[4] <= 1'h0;
    else phase[4] <= _136_[4];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[5] <= 1'h0;
    else phase[5] <= _136_[5];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[6] <= 1'h0;
    else phase[6] <= _136_[6];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[7] <= 1'h0;
    else phase[7] <= _136_[7];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[8] <= 1'h0;
    else phase[8] <= _136_[8];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[9] <= 1'h0;
    else phase[9] <= _136_[9];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[10] <= 1'h0;
    else phase[10] <= _136_[10];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[11] <= 1'h0;
    else phase[11] <= _136_[11];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[12] <= 1'h0;
    else phase[12] <= _136_[12];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[13] <= 1'h0;
    else phase[13] <= _136_[13];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[14] <= 1'h0;
    else phase[14] <= _136_[14];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[15] <= 1'h0;
    else phase[15] <= _136_[15];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[16] <= 1'h0;
    else phase[16] <= _136_[16];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[17] <= 1'h0;
    else phase[17] <= _136_[17];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[18] <= 1'h0;
    else phase[18] <= _136_[18];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[19] <= 1'h0;
    else phase[19] <= _136_[19];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[20] <= 1'h0;
    else phase[20] <= _136_[20];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[21] <= 1'h0;
    else phase[21] <= _136_[21];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[22] <= 1'h0;
    else phase[22] <= _136_[22];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) phase[23] <= 1'h0;
    else phase[23] <= _136_[23];
  assign _136_[0] = _135_[0];
endmodule

module lock_detector(clk, rst_n, up, dn, locked);
  wire _000_;
  wire [10:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  input clk;
  wire clk;
  input dn;
  wire dn;
  output locked;
  reg locked;
  reg [10:0] qcnt;
  input rst_n;
  wire rst_n;
  input up;
  wire up;
  assign _003_ = ~(dn | up);
  assign _004_ = ~(qcnt[1] | qcnt[0]);
  assign _005_ = qcnt[3] | qcnt[2];
  assign _006_ = _004_ & ~(_005_);
  assign _007_ = qcnt[5] | qcnt[4];
  assign _008_ = qcnt[7] | qcnt[6];
  assign _009_ = _008_ | _007_;
  assign _010_ = _006_ & ~(_009_);
  assign _011_ = ~qcnt[10];
  assign _012_ = qcnt[9] | qcnt[8];
  assign _013_ = _012_ | _011_;
  assign _000_ = _010_ & ~(_013_);
  assign _002_ = ~(_000_ & _003_);
  assign _014_ = _000_ | qcnt[0];
  assign _001_[0] = _003_ & ~(_014_);
  assign _015_ = ~(qcnt[1] ^ qcnt[0]);
  assign _016_ = _015_ | _000_;
  assign _001_[1] = _003_ & ~(_016_);
  assign _017_ = ~(qcnt[1] & qcnt[0]);
  assign _018_ = _017_ ^ qcnt[2];
  assign _019_ = _018_ | _000_;
  assign _001_[2] = _003_ & ~(_019_);
  assign _020_ = qcnt[1] & qcnt[0];
  assign _021_ = ~(_020_ & qcnt[2]);
  assign _022_ = _021_ ^ qcnt[3];
  assign _023_ = _022_ | _000_;
  assign _001_[3] = _003_ & ~(_023_);
  assign _024_ = ~(qcnt[3] & qcnt[2]);
  assign _025_ = _024_ | _017_;
  assign _026_ = _025_ ^ qcnt[4];
  assign _027_ = _026_ | _000_;
  assign _001_[4] = _003_ & ~(_027_);
  assign _028_ = _020_ & ~(_024_);
  assign _029_ = ~(_028_ & qcnt[4]);
  assign _030_ = _029_ ^ qcnt[5];
  assign _031_ = _030_ | _000_;
  assign _001_[5] = _003_ & ~(_031_);
  assign _032_ = ~(qcnt[5] & qcnt[4]);
  assign _033_ = _032_ | _025_;
  assign _034_ = _033_ ^ qcnt[6];
  assign _035_ = _034_ | _000_;
  assign _001_[6] = _003_ & ~(_035_);
  assign _036_ = _033_ | ~(qcnt[6]);
  assign _037_ = _036_ ^ qcnt[7];
  assign _038_ = _037_ | _000_;
  assign _001_[7] = _003_ & ~(_038_);
  assign _039_ = ~(qcnt[7] & qcnt[6]);
  assign _040_ = _039_ | _032_;
  assign _041_ = _028_ & ~(_040_);
  assign _042_ = ~(_041_ ^ qcnt[8]);
  assign _043_ = _042_ | _000_;
  assign _001_[8] = _003_ & ~(_043_);
  assign _044_ = ~(_041_ & qcnt[8]);
  assign _045_ = _044_ ^ qcnt[9];
  assign _046_ = _045_ | _000_;
  assign _001_[9] = _003_ & ~(_046_);
  assign _047_ = ~(qcnt[9] & qcnt[8]);
  assign _048_ = _041_ & ~(_047_);
  assign _049_ = _048_ ^ _011_;
  assign _050_ = _049_ | _000_;
  assign _001_[10] = _003_ & ~(_050_);
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[0] <= 1'h0;
    else if (_002_) qcnt[0] <= _001_[0];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[1] <= 1'h0;
    else if (_002_) qcnt[1] <= _001_[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[2] <= 1'h0;
    else if (_002_) qcnt[2] <= _001_[2];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[3] <= 1'h0;
    else if (_002_) qcnt[3] <= _001_[3];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[4] <= 1'h0;
    else if (_002_) qcnt[4] <= _001_[4];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[5] <= 1'h0;
    else if (_002_) qcnt[5] <= _001_[5];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[6] <= 1'h0;
    else if (_002_) qcnt[6] <= _001_[6];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[7] <= 1'h0;
    else if (_002_) qcnt[7] <= _001_[7];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[8] <= 1'h0;
    else if (_002_) qcnt[8] <= _001_[8];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[9] <= 1'h0;
    else if (_002_) qcnt[9] <= _001_[9];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) qcnt[10] <= 1'h0;
    else if (_002_) qcnt[10] <= _001_[10];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) locked <= 1'h0;
    else locked <= _000_;
endmodule

module phase_detector(clk, rst_n, ref_edge, fb_edge, up, dn);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  input clk;
  wire clk;
  output dn;
  reg dn;
  input fb_edge;
  wire fb_edge;
  input ref_edge;
  wire ref_edge;
  input rst_n;
  wire rst_n;
  output up;
  reg up;
  assign _11_ = dn & ref_edge;
  assign _04_ = _11_ | fb_edge;
  assign _05_ = up & dn;
  assign _03_ = _05_ | _04_;
  assign _06_ = up & fb_edge;
  assign _07_ = _06_ | ref_edge;
  assign _02_ = _07_ | _05_;
  assign _08_ = ~(up & dn);
  assign _09_ = _11_ | ~(fb_edge);
  assign _00_ = _08_ & ~(_09_);
  assign _10_ = _06_ | ~(ref_edge);
  assign _01_ = _08_ & ~(_10_);
  always @(posedge clk, negedge rst_n)
    if (!rst_n) up <= 1'h0;
    else if (_02_) up <= _01_;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) dn <= 1'h0;
    else if (_03_) dn <= _00_;
endmodule

module pll_top(clk, rst_n, ref_in, pll_out, locked);
  input clk;
  wire clk;
  wire dn;
  wire fb_clk;
  wire fb_edge;
  wire [23:0] freq_word;
  output locked;
  wire locked;
  wire [23:0] phase;
  output pll_out;
  wire pll_out;
  wire ref_edge;
  input ref_in;
  wire ref_in;
  wire ref_sync;
  input rst_n;
  wire rst_n;
  wire up;
  \$paramod\divider\N=s32'00000000000000000000000000000100  u_div (
    .clk(pll_out),
    .clk_div(fb_clk),
    .edge_pulse(fb_edge),
    .rst_n(rst_n)
  );
  \$paramod$db93e613317dfb2b0e4491d763dbf58ebcc52dfe\loop_filter  u_lf (
    .clk(clk),
    .dn(dn),
    .freq_word(freq_word),
    .rst_n(rst_n),
    .up(up)
  );
  lock_detector u_lock (
    .clk(clk),
    .dn(dn),
    .locked(locked),
    .rst_n(rst_n),
    .up(up)
  );
  \$paramod\nco\FW=s32'00000000000000000000000000011000  u_nco (
    .clk(clk),
    .freq_word(freq_word),
    .nco_clk(pll_out),
    .phase(phase),
    .rst_n(rst_n)
  );
  phase_detector u_pfd (
    .clk(clk),
    .dn(dn),
    .fb_edge(fb_edge),
    .ref_edge(ref_edge),
    .rst_n(rst_n),
    .up(up)
  );
  sync_edge u_sync_ref (
    .async_in(ref_in),
    .clk(clk),
    .rst_n(rst_n),
    .sync_level(ref_sync),
    .sync_rise(ref_edge)
  );
endmodule

module sync_edge(clk, rst_n, async_in, sync_level, sync_rise);
  input async_in;
  wire async_in;
  input clk;
  wire clk;
  reg q1;
  reg q2;
  input rst_n;
  wire rst_n;
  output sync_level;
  wire sync_level;
  output sync_rise;
  wire sync_rise;
  assign sync_rise = q1 & ~(q2);
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q1 <= 1'h0;
    else q1 <= async_in;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q2 <= 1'h0;
    else q2 <= q1;
  assign sync_level = q2;
endmodule
